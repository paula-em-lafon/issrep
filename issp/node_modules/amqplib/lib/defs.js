/** @preserve This file is generated by the script
 * ../bin/generate-defs.js, which is not in general included in a
 * distribution, but is available in the source repository e.g. at
 * https://github.com/squaremo/amqp.node/
 */
"use strict";

function decodeConnectionStart(buffer) {
  var val, len, fields = {}, offset = 0;
  val = buffer[offset];
  offset++;
  fields.versionMajor = val;
  val = buffer[offset];
  offset++;
  fields.versionMinor = val;
  len = buffer.readUInt32BE(offset);
  offset += 4;
  val = decodeFields(buffer.slice(offset, offset + len));
  offset += len;
  fields.serverProperties = val;
  len = buffer.readUInt32BE(offset);
  offset += 4;
  val = buffer.slice(offset, offset + len);
  offset += len;
  fields.mechanisms = val;
  len = buffer.readUInt32BE(offset);
  offset += 4;
  val = buffer.slice(offset, offset + len);
  offset += len;
  fields.locales = val;
  return fields;
}

function encodeConnectionStart(channel, fields) {
  var len, offset = 0, val = null, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(655370, 7);
  offset = 11;
  val = fields.versionMajor;
  if ("number" != typeof val || isNaN(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'versionMajor' wrong type; must be a number (but not NaN)");
    val = 0;
  }
  buffer.writeUInt8(val, offset);
  offset++;
  val = fields.versionMinor;
  if ("number" != typeof val || isNaN(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'versionMinor' wrong type; must be a number (but not NaN)");
    val = 9;
  }
  buffer.writeUInt8(val, offset);
  offset++;
  val = fields.serverProperties;
  if ("object" != typeof val) throw void 0 === val ? new Error("Missing value for serverProperties") : new TypeError("Argument 'serverProperties' wrong type; must be an object");
  offset += encodeTable(buffer, val, offset);
  val = fields.mechanisms;
  if (!Buffer.isBuffer(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'mechanisms' wrong type; must be a Buffer");
    val = "PLAIN";
  }
  len = val.length;
  buffer.writeUInt32BE(len, offset);
  offset += 4;
  val.copy(buffer, offset);
  offset += len;
  val = fields.locales;
  if (!Buffer.isBuffer(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'locales' wrong type; must be a Buffer");
    val = "en_US";
  }
  len = val.length;
  buffer.writeUInt32BE(len, offset);
  offset += 4;
  val.copy(buffer, offset);
  offset += len;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeConnectionStartOk(buffer) {
  var val, len, fields = {}, offset = 0;
  len = buffer.readUInt32BE(offset);
  offset += 4;
  val = decodeFields(buffer.slice(offset, offset + len));
  offset += len;
  fields.clientProperties = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.mechanism = val;
  len = buffer.readUInt32BE(offset);
  offset += 4;
  val = buffer.slice(offset, offset + len);
  offset += len;
  fields.response = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.locale = val;
  return fields;
}

function encodeConnectionStartOk(channel, fields) {
  var len, offset = 0, val = null, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(655371, 7);
  offset = 11;
  val = fields.clientProperties;
  if ("object" != typeof val) throw void 0 === val ? new Error("Missing value for clientProperties") : new TypeError("Argument 'clientProperties' wrong type; must be an object");
  offset += encodeTable(buffer, val, offset);
  val = fields.mechanism;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) {
    if (void 0 !== val) throw new TypeError("Argument 'mechanism' wrong type; must be a string (up to 255 chars)");
    val = "PLAIN";
  }
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.response;
  if (!Buffer.isBuffer(val)) throw void 0 === val ? new Error("Missing value for response") : new TypeError("Argument 'response' wrong type; must be a Buffer");
  len = val.length;
  buffer.writeUInt32BE(len, offset);
  offset += 4;
  val.copy(buffer, offset);
  offset += len;
  val = fields.locale;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) {
    if (void 0 !== val) throw new TypeError("Argument 'locale' wrong type; must be a string (up to 255 chars)");
    val = "en_US";
  }
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeConnectionSecure(buffer) {
  var val, len, fields = {}, offset = 0;
  len = buffer.readUInt32BE(offset);
  offset += 4;
  val = buffer.slice(offset, offset + len);
  offset += len;
  fields.challenge = val;
  return fields;
}

function encodeConnectionSecure(channel, fields) {
  var len, offset = 0, val = null, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(655380, 7);
  offset = 11;
  val = fields.challenge;
  if (!Buffer.isBuffer(val)) throw void 0 === val ? new Error("Missing value for challenge") : new TypeError("Argument 'challenge' wrong type; must be a Buffer");
  len = val.length;
  buffer.writeUInt32BE(len, offset);
  offset += 4;
  val.copy(buffer, offset);
  offset += len;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeConnectionSecureOk(buffer) {
  var val, len, fields = {}, offset = 0;
  len = buffer.readUInt32BE(offset);
  offset += 4;
  val = buffer.slice(offset, offset + len);
  offset += len;
  fields.response = val;
  return fields;
}

function encodeConnectionSecureOk(channel, fields) {
  var len, offset = 0, val = null, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(655381, 7);
  offset = 11;
  val = fields.response;
  if (!Buffer.isBuffer(val)) throw void 0 === val ? new Error("Missing value for response") : new TypeError("Argument 'response' wrong type; must be a Buffer");
  len = val.length;
  buffer.writeUInt32BE(len, offset);
  offset += 4;
  val.copy(buffer, offset);
  offset += len;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeConnectionTune(buffer) {
  var val, fields = {}, offset = 0;
  val = buffer.readUInt16BE(offset);
  offset += 2;
  fields.channelMax = val;
  val = buffer.readUInt32BE(offset);
  offset += 4;
  fields.frameMax = val;
  val = buffer.readUInt16BE(offset);
  offset += 2;
  fields.heartbeat = val;
  return fields;
}

function encodeConnectionTune(channel, fields) {
  var offset = 0, val = null, buffer = new Buffer(20);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(655390, 7);
  offset = 11;
  val = fields.channelMax;
  if ("number" != typeof val || isNaN(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'channelMax' wrong type; must be a number (but not NaN)");
    val = 0;
  }
  buffer.writeUInt16BE(val, offset);
  offset += 2;
  val = fields.frameMax;
  if ("number" != typeof val || isNaN(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'frameMax' wrong type; must be a number (but not NaN)");
    val = 0;
  }
  buffer.writeUInt32BE(val, offset);
  offset += 4;
  val = fields.heartbeat;
  if ("number" != typeof val || isNaN(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'heartbeat' wrong type; must be a number (but not NaN)");
    val = 0;
  }
  buffer.writeUInt16BE(val, offset);
  offset += 2;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeConnectionTuneOk(buffer) {
  var val, fields = {}, offset = 0;
  val = buffer.readUInt16BE(offset);
  offset += 2;
  fields.channelMax = val;
  val = buffer.readUInt32BE(offset);
  offset += 4;
  fields.frameMax = val;
  val = buffer.readUInt16BE(offset);
  offset += 2;
  fields.heartbeat = val;
  return fields;
}

function encodeConnectionTuneOk(channel, fields) {
  var offset = 0, val = null, buffer = new Buffer(20);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(655391, 7);
  offset = 11;
  val = fields.channelMax;
  if ("number" != typeof val || isNaN(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'channelMax' wrong type; must be a number (but not NaN)");
    val = 0;
  }
  buffer.writeUInt16BE(val, offset);
  offset += 2;
  val = fields.frameMax;
  if ("number" != typeof val || isNaN(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'frameMax' wrong type; must be a number (but not NaN)");
    val = 0;
  }
  buffer.writeUInt32BE(val, offset);
  offset += 4;
  val = fields.heartbeat;
  if ("number" != typeof val || isNaN(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'heartbeat' wrong type; must be a number (but not NaN)");
    val = 0;
  }
  buffer.writeUInt16BE(val, offset);
  offset += 2;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeConnectionOpen(buffer) {
  var val, len, fields = {}, offset = 0;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.virtualHost = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.capabilities = val;
  val = !!(1 & buffer[offset]);
  fields.insist = val;
  return fields;
}

function encodeConnectionOpen(channel, fields) {
  var len, offset = 0, val = null, bits = 0, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(655400, 7);
  offset = 11;
  val = fields.virtualHost;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) {
    if (void 0 !== val) throw new TypeError("Argument 'virtualHost' wrong type; must be a string (up to 255 chars)");
    val = "/";
  }
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.capabilities;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) {
    if (void 0 !== val) throw new TypeError("Argument 'capabilities' wrong type; must be a string (up to 255 chars)");
    val = "";
  }
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.insist;
  val && (bits += 1);
  buffer[offset] = bits;
  offset++;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeConnectionOpenOk(buffer) {
  var val, len, fields = {}, offset = 0;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.knownHosts = val;
  return fields;
}

function encodeConnectionOpenOk(channel, fields) {
  var len, offset = 0, val = null, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(655401, 7);
  offset = 11;
  val = fields.knownHosts;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) {
    if (void 0 !== val) throw new TypeError("Argument 'knownHosts' wrong type; must be a string (up to 255 chars)");
    val = "";
  }
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeConnectionClose(buffer) {
  var val, len, fields = {}, offset = 0;
  val = buffer.readUInt16BE(offset);
  offset += 2;
  fields.replyCode = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.replyText = val;
  val = buffer.readUInt16BE(offset);
  offset += 2;
  fields.classId = val;
  val = buffer.readUInt16BE(offset);
  offset += 2;
  fields.methodId = val;
  return fields;
}

function encodeConnectionClose(channel, fields) {
  var len, offset = 0, val = null, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(655410, 7);
  offset = 11;
  val = fields.replyCode;
  if ("number" != typeof val || isNaN(val)) throw void 0 === val ? new Error("Missing value for replyCode") : new TypeError("Argument 'replyCode' wrong type; must be a number (but not NaN)");
  buffer.writeUInt16BE(val, offset);
  offset += 2;
  val = fields.replyText;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) {
    if (void 0 !== val) throw new TypeError("Argument 'replyText' wrong type; must be a string (up to 255 chars)");
    val = "";
  }
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.classId;
  if ("number" != typeof val || isNaN(val)) throw void 0 === val ? new Error("Missing value for classId") : new TypeError("Argument 'classId' wrong type; must be a number (but not NaN)");
  buffer.writeUInt16BE(val, offset);
  offset += 2;
  val = fields.methodId;
  if ("number" != typeof val || isNaN(val)) throw void 0 === val ? new Error("Missing value for methodId") : new TypeError("Argument 'methodId' wrong type; must be a number (but not NaN)");
  buffer.writeUInt16BE(val, offset);
  offset += 2;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeConnectionCloseOk() {
  var fields = {};
  return fields;
}

function encodeConnectionCloseOk(channel) {
  var offset = 0, buffer = new Buffer(12);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(655411, 7);
  offset = 11;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeChannelOpen(buffer) {
  var val, len, fields = {}, offset = 0;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.outOfBand = val;
  return fields;
}

function encodeChannelOpen(channel, fields) {
  var len, offset = 0, val = null, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(1310730, 7);
  offset = 11;
  val = fields.outOfBand;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) {
    if (void 0 !== val) throw new TypeError("Argument 'outOfBand' wrong type; must be a string (up to 255 chars)");
    val = "";
  }
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeChannelOpenOk(buffer) {
  var val, len, fields = {}, offset = 0;
  len = buffer.readUInt32BE(offset);
  offset += 4;
  val = buffer.slice(offset, offset + len);
  offset += len;
  fields.channelId = val;
  return fields;
}

function encodeChannelOpenOk(channel, fields) {
  var len, offset = 0, val = null, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(1310731, 7);
  offset = 11;
  val = fields.channelId;
  if (!Buffer.isBuffer(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'channelId' wrong type; must be a Buffer");
    val = "";
  }
  len = val.length;
  buffer.writeUInt32BE(len, offset);
  offset += 4;
  val.copy(buffer, offset);
  offset += len;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeChannelFlow(buffer) {
  var val, fields = {}, offset = 0;
  val = !!(1 & buffer[offset]);
  fields.active = val;
  return fields;
}

function encodeChannelFlow(channel, fields) {
  var offset = 0, val = null, bits = 0, buffer = new Buffer(13);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(1310740, 7);
  offset = 11;
  val = fields.active;
  val && (bits += 1);
  buffer[offset] = bits;
  offset++;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeChannelFlowOk(buffer) {
  var val, fields = {}, offset = 0;
  val = !!(1 & buffer[offset]);
  fields.active = val;
  return fields;
}

function encodeChannelFlowOk(channel, fields) {
  var offset = 0, val = null, bits = 0, buffer = new Buffer(13);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(1310741, 7);
  offset = 11;
  val = fields.active;
  val && (bits += 1);
  buffer[offset] = bits;
  offset++;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeChannelClose(buffer) {
  var val, len, fields = {}, offset = 0;
  val = buffer.readUInt16BE(offset);
  offset += 2;
  fields.replyCode = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.replyText = val;
  val = buffer.readUInt16BE(offset);
  offset += 2;
  fields.classId = val;
  val = buffer.readUInt16BE(offset);
  offset += 2;
  fields.methodId = val;
  return fields;
}

function encodeChannelClose(channel, fields) {
  var len, offset = 0, val = null, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(1310760, 7);
  offset = 11;
  val = fields.replyCode;
  if ("number" != typeof val || isNaN(val)) throw void 0 === val ? new Error("Missing value for replyCode") : new TypeError("Argument 'replyCode' wrong type; must be a number (but not NaN)");
  buffer.writeUInt16BE(val, offset);
  offset += 2;
  val = fields.replyText;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) {
    if (void 0 !== val) throw new TypeError("Argument 'replyText' wrong type; must be a string (up to 255 chars)");
    val = "";
  }
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.classId;
  if ("number" != typeof val || isNaN(val)) throw void 0 === val ? new Error("Missing value for classId") : new TypeError("Argument 'classId' wrong type; must be a number (but not NaN)");
  buffer.writeUInt16BE(val, offset);
  offset += 2;
  val = fields.methodId;
  if ("number" != typeof val || isNaN(val)) throw void 0 === val ? new Error("Missing value for methodId") : new TypeError("Argument 'methodId' wrong type; must be a number (but not NaN)");
  buffer.writeUInt16BE(val, offset);
  offset += 2;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeChannelCloseOk() {
  var fields = {};
  return fields;
}

function encodeChannelCloseOk(channel) {
  var offset = 0, buffer = new Buffer(12);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(1310761, 7);
  offset = 11;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeAccessRequest(buffer) {
  var val, len, fields = {}, offset = 0;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.realm = val;
  val = !!(1 & buffer[offset]);
  fields.exclusive = val;
  val = !!(2 & buffer[offset]);
  fields.passive = val;
  val = !!(4 & buffer[offset]);
  fields.active = val;
  val = !!(8 & buffer[offset]);
  fields.write = val;
  val = !!(16 & buffer[offset]);
  fields.read = val;
  return fields;
}

function encodeAccessRequest(channel, fields) {
  var len, offset = 0, val = null, bits = 0, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(1966090, 7);
  offset = 11;
  val = fields.realm;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) {
    if (void 0 !== val) throw new TypeError("Argument 'realm' wrong type; must be a string (up to 255 chars)");
    val = "/data";
  }
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.exclusive;
  val && (bits += 1);
  val = fields.passive;
  val && (bits += 2);
  val = fields.active;
  val && (bits += 4);
  val = fields.write;
  val && (bits += 8);
  val = fields.read;
  val && (bits += 16);
  buffer[offset] = bits;
  offset++;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeAccessRequestOk(buffer) {
  var val, fields = {}, offset = 0;
  val = buffer.readUInt16BE(offset);
  offset += 2;
  fields.ticket = val;
  return fields;
}

function encodeAccessRequestOk(channel, fields) {
  var offset = 0, val = null, buffer = new Buffer(14);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(1966091, 7);
  offset = 11;
  val = fields.ticket;
  if ("number" != typeof val || isNaN(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'ticket' wrong type; must be a number (but not NaN)");
    val = 1;
  }
  buffer.writeUInt16BE(val, offset);
  offset += 2;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeExchangeDeclare(buffer) {
  var val, len, fields = {}, offset = 0;
  val = buffer.readUInt16BE(offset);
  offset += 2;
  fields.ticket = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.exchange = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.type = val;
  val = !!(1 & buffer[offset]);
  fields.passive = val;
  val = !!(2 & buffer[offset]);
  fields.durable = val;
  val = !!(4 & buffer[offset]);
  fields.autoDelete = val;
  val = !!(8 & buffer[offset]);
  fields.internal = val;
  val = !!(16 & buffer[offset]);
  fields.nowait = val;
  offset++;
  len = buffer.readUInt32BE(offset);
  offset += 4;
  val = decodeFields(buffer.slice(offset, offset + len));
  offset += len;
  fields.arguments = val;
  return fields;
}

function encodeExchangeDeclare(channel, fields) {
  var len, offset = 0, val = null, bits = 0, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(2621450, 7);
  offset = 11;
  val = fields.ticket;
  if ("number" != typeof val || isNaN(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'ticket' wrong type; must be a number (but not NaN)");
    val = 0;
  }
  buffer.writeUInt16BE(val, offset);
  offset += 2;
  val = fields.exchange;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw void 0 === val ? new Error("Missing value for exchange") : new TypeError("Argument 'exchange' wrong type; must be a string (up to 255 chars)");
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.type;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) {
    if (void 0 !== val) throw new TypeError("Argument 'type' wrong type; must be a string (up to 255 chars)");
    val = "direct";
  }
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.passive;
  val && (bits += 1);
  val = fields.durable;
  val && (bits += 2);
  val = fields.autoDelete;
  val && (bits += 4);
  val = fields.internal;
  val && (bits += 8);
  val = fields.nowait;
  val && (bits += 16);
  val = fields.arguments;
  if ("object" != typeof val) {
    if (void 0 !== val) throw new TypeError("Argument 'arguments' wrong type; must be an object");
    val = {};
  }
  buffer[offset] = bits;
  offset++;
  bits = 0;
  offset += encodeTable(buffer, val, offset);
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeExchangeDeclareOk() {
  var fields = {};
  return fields;
}

function encodeExchangeDeclareOk(channel) {
  var offset = 0, buffer = new Buffer(12);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(2621451, 7);
  offset = 11;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeExchangeDelete(buffer) {
  var val, len, fields = {}, offset = 0;
  val = buffer.readUInt16BE(offset);
  offset += 2;
  fields.ticket = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.exchange = val;
  val = !!(1 & buffer[offset]);
  fields.ifUnused = val;
  val = !!(2 & buffer[offset]);
  fields.nowait = val;
  return fields;
}

function encodeExchangeDelete(channel, fields) {
  var len, offset = 0, val = null, bits = 0, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(2621460, 7);
  offset = 11;
  val = fields.ticket;
  if ("number" != typeof val || isNaN(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'ticket' wrong type; must be a number (but not NaN)");
    val = 0;
  }
  buffer.writeUInt16BE(val, offset);
  offset += 2;
  val = fields.exchange;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw void 0 === val ? new Error("Missing value for exchange") : new TypeError("Argument 'exchange' wrong type; must be a string (up to 255 chars)");
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.ifUnused;
  val && (bits += 1);
  val = fields.nowait;
  val && (bits += 2);
  buffer[offset] = bits;
  offset++;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeExchangeDeleteOk() {
  var fields = {};
  return fields;
}

function encodeExchangeDeleteOk(channel) {
  var offset = 0, buffer = new Buffer(12);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(2621461, 7);
  offset = 11;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeExchangeBind(buffer) {
  var val, len, fields = {}, offset = 0;
  val = buffer.readUInt16BE(offset);
  offset += 2;
  fields.ticket = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.destination = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.source = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.routingKey = val;
  val = !!(1 & buffer[offset]);
  fields.nowait = val;
  offset++;
  len = buffer.readUInt32BE(offset);
  offset += 4;
  val = decodeFields(buffer.slice(offset, offset + len));
  offset += len;
  fields.arguments = val;
  return fields;
}

function encodeExchangeBind(channel, fields) {
  var len, offset = 0, val = null, bits = 0, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(2621470, 7);
  offset = 11;
  val = fields.ticket;
  if ("number" != typeof val || isNaN(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'ticket' wrong type; must be a number (but not NaN)");
    val = 0;
  }
  buffer.writeUInt16BE(val, offset);
  offset += 2;
  val = fields.destination;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw void 0 === val ? new Error("Missing value for destination") : new TypeError("Argument 'destination' wrong type; must be a string (up to 255 chars)");
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.source;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw void 0 === val ? new Error("Missing value for source") : new TypeError("Argument 'source' wrong type; must be a string (up to 255 chars)");
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.routingKey;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) {
    if (void 0 !== val) throw new TypeError("Argument 'routingKey' wrong type; must be a string (up to 255 chars)");
    val = "";
  }
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.nowait;
  val && (bits += 1);
  val = fields.arguments;
  if ("object" != typeof val) {
    if (void 0 !== val) throw new TypeError("Argument 'arguments' wrong type; must be an object");
    val = {};
  }
  buffer[offset] = bits;
  offset++;
  bits = 0;
  offset += encodeTable(buffer, val, offset);
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeExchangeBindOk() {
  var fields = {};
  return fields;
}

function encodeExchangeBindOk(channel) {
  var offset = 0, buffer = new Buffer(12);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(2621471, 7);
  offset = 11;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeExchangeUnbind(buffer) {
  var val, len, fields = {}, offset = 0;
  val = buffer.readUInt16BE(offset);
  offset += 2;
  fields.ticket = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.destination = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.source = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.routingKey = val;
  val = !!(1 & buffer[offset]);
  fields.nowait = val;
  offset++;
  len = buffer.readUInt32BE(offset);
  offset += 4;
  val = decodeFields(buffer.slice(offset, offset + len));
  offset += len;
  fields.arguments = val;
  return fields;
}

function encodeExchangeUnbind(channel, fields) {
  var len, offset = 0, val = null, bits = 0, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(2621480, 7);
  offset = 11;
  val = fields.ticket;
  if ("number" != typeof val || isNaN(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'ticket' wrong type; must be a number (but not NaN)");
    val = 0;
  }
  buffer.writeUInt16BE(val, offset);
  offset += 2;
  val = fields.destination;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw void 0 === val ? new Error("Missing value for destination") : new TypeError("Argument 'destination' wrong type; must be a string (up to 255 chars)");
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.source;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw void 0 === val ? new Error("Missing value for source") : new TypeError("Argument 'source' wrong type; must be a string (up to 255 chars)");
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.routingKey;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) {
    if (void 0 !== val) throw new TypeError("Argument 'routingKey' wrong type; must be a string (up to 255 chars)");
    val = "";
  }
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.nowait;
  val && (bits += 1);
  val = fields.arguments;
  if ("object" != typeof val) {
    if (void 0 !== val) throw new TypeError("Argument 'arguments' wrong type; must be an object");
    val = {};
  }
  buffer[offset] = bits;
  offset++;
  bits = 0;
  offset += encodeTable(buffer, val, offset);
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeExchangeUnbindOk() {
  var fields = {};
  return fields;
}

function encodeExchangeUnbindOk(channel) {
  var offset = 0, buffer = new Buffer(12);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(2621491, 7);
  offset = 11;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeQueueDeclare(buffer) {
  var val, len, fields = {}, offset = 0;
  val = buffer.readUInt16BE(offset);
  offset += 2;
  fields.ticket = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.queue = val;
  val = !!(1 & buffer[offset]);
  fields.passive = val;
  val = !!(2 & buffer[offset]);
  fields.durable = val;
  val = !!(4 & buffer[offset]);
  fields.exclusive = val;
  val = !!(8 & buffer[offset]);
  fields.autoDelete = val;
  val = !!(16 & buffer[offset]);
  fields.nowait = val;
  offset++;
  len = buffer.readUInt32BE(offset);
  offset += 4;
  val = decodeFields(buffer.slice(offset, offset + len));
  offset += len;
  fields.arguments = val;
  return fields;
}

function encodeQueueDeclare(channel, fields) {
  var len, offset = 0, val = null, bits = 0, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3276810, 7);
  offset = 11;
  val = fields.ticket;
  if ("number" != typeof val || isNaN(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'ticket' wrong type; must be a number (but not NaN)");
    val = 0;
  }
  buffer.writeUInt16BE(val, offset);
  offset += 2;
  val = fields.queue;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) {
    if (void 0 !== val) throw new TypeError("Argument 'queue' wrong type; must be a string (up to 255 chars)");
    val = "";
  }
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.passive;
  val && (bits += 1);
  val = fields.durable;
  val && (bits += 2);
  val = fields.exclusive;
  val && (bits += 4);
  val = fields.autoDelete;
  val && (bits += 8);
  val = fields.nowait;
  val && (bits += 16);
  val = fields.arguments;
  if ("object" != typeof val) {
    if (void 0 !== val) throw new TypeError("Argument 'arguments' wrong type; must be an object");
    val = {};
  }
  buffer[offset] = bits;
  offset++;
  bits = 0;
  offset += encodeTable(buffer, val, offset);
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeQueueDeclareOk(buffer) {
  var val, len, fields = {}, offset = 0;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.queue = val;
  val = buffer.readUInt32BE(offset);
  offset += 4;
  fields.messageCount = val;
  val = buffer.readUInt32BE(offset);
  offset += 4;
  fields.consumerCount = val;
  return fields;
}

function encodeQueueDeclareOk(channel, fields) {
  var len, offset = 0, val = null, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3276811, 7);
  offset = 11;
  val = fields.queue;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw void 0 === val ? new Error("Missing value for queue") : new TypeError("Argument 'queue' wrong type; must be a string (up to 255 chars)");
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.messageCount;
  if ("number" != typeof val || isNaN(val)) throw void 0 === val ? new Error("Missing value for messageCount") : new TypeError("Argument 'messageCount' wrong type; must be a number (but not NaN)");
  buffer.writeUInt32BE(val, offset);
  offset += 4;
  val = fields.consumerCount;
  if ("number" != typeof val || isNaN(val)) throw void 0 === val ? new Error("Missing value for consumerCount") : new TypeError("Argument 'consumerCount' wrong type; must be a number (but not NaN)");
  buffer.writeUInt32BE(val, offset);
  offset += 4;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeQueueBind(buffer) {
  var val, len, fields = {}, offset = 0;
  val = buffer.readUInt16BE(offset);
  offset += 2;
  fields.ticket = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.queue = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.exchange = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.routingKey = val;
  val = !!(1 & buffer[offset]);
  fields.nowait = val;
  offset++;
  len = buffer.readUInt32BE(offset);
  offset += 4;
  val = decodeFields(buffer.slice(offset, offset + len));
  offset += len;
  fields.arguments = val;
  return fields;
}

function encodeQueueBind(channel, fields) {
  var len, offset = 0, val = null, bits = 0, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3276820, 7);
  offset = 11;
  val = fields.ticket;
  if ("number" != typeof val || isNaN(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'ticket' wrong type; must be a number (but not NaN)");
    val = 0;
  }
  buffer.writeUInt16BE(val, offset);
  offset += 2;
  val = fields.queue;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) {
    if (void 0 !== val) throw new TypeError("Argument 'queue' wrong type; must be a string (up to 255 chars)");
    val = "";
  }
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.exchange;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw void 0 === val ? new Error("Missing value for exchange") : new TypeError("Argument 'exchange' wrong type; must be a string (up to 255 chars)");
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.routingKey;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) {
    if (void 0 !== val) throw new TypeError("Argument 'routingKey' wrong type; must be a string (up to 255 chars)");
    val = "";
  }
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.nowait;
  val && (bits += 1);
  val = fields.arguments;
  if ("object" != typeof val) {
    if (void 0 !== val) throw new TypeError("Argument 'arguments' wrong type; must be an object");
    val = {};
  }
  buffer[offset] = bits;
  offset++;
  bits = 0;
  offset += encodeTable(buffer, val, offset);
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeQueueBindOk() {
  var fields = {};
  return fields;
}

function encodeQueueBindOk(channel) {
  var offset = 0, buffer = new Buffer(12);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3276821, 7);
  offset = 11;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeQueuePurge(buffer) {
  var val, len, fields = {}, offset = 0;
  val = buffer.readUInt16BE(offset);
  offset += 2;
  fields.ticket = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.queue = val;
  val = !!(1 & buffer[offset]);
  fields.nowait = val;
  return fields;
}

function encodeQueuePurge(channel, fields) {
  var len, offset = 0, val = null, bits = 0, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3276830, 7);
  offset = 11;
  val = fields.ticket;
  if ("number" != typeof val || isNaN(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'ticket' wrong type; must be a number (but not NaN)");
    val = 0;
  }
  buffer.writeUInt16BE(val, offset);
  offset += 2;
  val = fields.queue;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) {
    if (void 0 !== val) throw new TypeError("Argument 'queue' wrong type; must be a string (up to 255 chars)");
    val = "";
  }
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.nowait;
  val && (bits += 1);
  buffer[offset] = bits;
  offset++;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeQueuePurgeOk(buffer) {
  var val, fields = {}, offset = 0;
  val = buffer.readUInt32BE(offset);
  offset += 4;
  fields.messageCount = val;
  return fields;
}

function encodeQueuePurgeOk(channel, fields) {
  var offset = 0, val = null, buffer = new Buffer(16);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3276831, 7);
  offset = 11;
  val = fields.messageCount;
  if ("number" != typeof val || isNaN(val)) throw void 0 === val ? new Error("Missing value for messageCount") : new TypeError("Argument 'messageCount' wrong type; must be a number (but not NaN)");
  buffer.writeUInt32BE(val, offset);
  offset += 4;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeQueueDelete(buffer) {
  var val, len, fields = {}, offset = 0;
  val = buffer.readUInt16BE(offset);
  offset += 2;
  fields.ticket = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.queue = val;
  val = !!(1 & buffer[offset]);
  fields.ifUnused = val;
  val = !!(2 & buffer[offset]);
  fields.ifEmpty = val;
  val = !!(4 & buffer[offset]);
  fields.nowait = val;
  return fields;
}

function encodeQueueDelete(channel, fields) {
  var len, offset = 0, val = null, bits = 0, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3276840, 7);
  offset = 11;
  val = fields.ticket;
  if ("number" != typeof val || isNaN(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'ticket' wrong type; must be a number (but not NaN)");
    val = 0;
  }
  buffer.writeUInt16BE(val, offset);
  offset += 2;
  val = fields.queue;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) {
    if (void 0 !== val) throw new TypeError("Argument 'queue' wrong type; must be a string (up to 255 chars)");
    val = "";
  }
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.ifUnused;
  val && (bits += 1);
  val = fields.ifEmpty;
  val && (bits += 2);
  val = fields.nowait;
  val && (bits += 4);
  buffer[offset] = bits;
  offset++;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeQueueDeleteOk(buffer) {
  var val, fields = {}, offset = 0;
  val = buffer.readUInt32BE(offset);
  offset += 4;
  fields.messageCount = val;
  return fields;
}

function encodeQueueDeleteOk(channel, fields) {
  var offset = 0, val = null, buffer = new Buffer(16);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3276841, 7);
  offset = 11;
  val = fields.messageCount;
  if ("number" != typeof val || isNaN(val)) throw void 0 === val ? new Error("Missing value for messageCount") : new TypeError("Argument 'messageCount' wrong type; must be a number (but not NaN)");
  buffer.writeUInt32BE(val, offset);
  offset += 4;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeQueueUnbind(buffer) {
  var val, len, fields = {}, offset = 0;
  val = buffer.readUInt16BE(offset);
  offset += 2;
  fields.ticket = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.queue = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.exchange = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.routingKey = val;
  len = buffer.readUInt32BE(offset);
  offset += 4;
  val = decodeFields(buffer.slice(offset, offset + len));
  offset += len;
  fields.arguments = val;
  return fields;
}

function encodeQueueUnbind(channel, fields) {
  var len, offset = 0, val = null, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3276850, 7);
  offset = 11;
  val = fields.ticket;
  if ("number" != typeof val || isNaN(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'ticket' wrong type; must be a number (but not NaN)");
    val = 0;
  }
  buffer.writeUInt16BE(val, offset);
  offset += 2;
  val = fields.queue;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) {
    if (void 0 !== val) throw new TypeError("Argument 'queue' wrong type; must be a string (up to 255 chars)");
    val = "";
  }
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.exchange;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw void 0 === val ? new Error("Missing value for exchange") : new TypeError("Argument 'exchange' wrong type; must be a string (up to 255 chars)");
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.routingKey;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) {
    if (void 0 !== val) throw new TypeError("Argument 'routingKey' wrong type; must be a string (up to 255 chars)");
    val = "";
  }
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.arguments;
  if ("object" != typeof val) {
    if (void 0 !== val) throw new TypeError("Argument 'arguments' wrong type; must be an object");
    val = {};
  }
  offset += encodeTable(buffer, val, offset);
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeQueueUnbindOk() {
  var fields = {};
  return fields;
}

function encodeQueueUnbindOk(channel) {
  var offset = 0, buffer = new Buffer(12);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3276851, 7);
  offset = 11;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeBasicQos(buffer) {
  var val, fields = {}, offset = 0;
  val = buffer.readUInt32BE(offset);
  offset += 4;
  fields.prefetchSize = val;
  val = buffer.readUInt16BE(offset);
  offset += 2;
  fields.prefetchCount = val;
  val = !!(1 & buffer[offset]);
  fields.global = val;
  return fields;
}

function encodeBasicQos(channel, fields) {
  var offset = 0, val = null, bits = 0, buffer = new Buffer(19);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3932170, 7);
  offset = 11;
  val = fields.prefetchSize;
  if ("number" != typeof val || isNaN(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'prefetchSize' wrong type; must be a number (but not NaN)");
    val = 0;
  }
  buffer.writeUInt32BE(val, offset);
  offset += 4;
  val = fields.prefetchCount;
  if ("number" != typeof val || isNaN(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'prefetchCount' wrong type; must be a number (but not NaN)");
    val = 0;
  }
  buffer.writeUInt16BE(val, offset);
  offset += 2;
  val = fields.global;
  val && (bits += 1);
  buffer[offset] = bits;
  offset++;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeBasicQosOk() {
  var fields = {};
  return fields;
}

function encodeBasicQosOk(channel) {
  var offset = 0, buffer = new Buffer(12);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3932171, 7);
  offset = 11;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeBasicConsume(buffer) {
  var val, len, fields = {}, offset = 0;
  val = buffer.readUInt16BE(offset);
  offset += 2;
  fields.ticket = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.queue = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.consumerTag = val;
  val = !!(1 & buffer[offset]);
  fields.noLocal = val;
  val = !!(2 & buffer[offset]);
  fields.noAck = val;
  val = !!(4 & buffer[offset]);
  fields.exclusive = val;
  val = !!(8 & buffer[offset]);
  fields.nowait = val;
  offset++;
  len = buffer.readUInt32BE(offset);
  offset += 4;
  val = decodeFields(buffer.slice(offset, offset + len));
  offset += len;
  fields.arguments = val;
  return fields;
}

function encodeBasicConsume(channel, fields) {
  var len, offset = 0, val = null, bits = 0, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3932180, 7);
  offset = 11;
  val = fields.ticket;
  if ("number" != typeof val || isNaN(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'ticket' wrong type; must be a number (but not NaN)");
    val = 0;
  }
  buffer.writeUInt16BE(val, offset);
  offset += 2;
  val = fields.queue;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) {
    if (void 0 !== val) throw new TypeError("Argument 'queue' wrong type; must be a string (up to 255 chars)");
    val = "";
  }
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.consumerTag;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) {
    if (void 0 !== val) throw new TypeError("Argument 'consumerTag' wrong type; must be a string (up to 255 chars)");
    val = "";
  }
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.noLocal;
  val && (bits += 1);
  val = fields.noAck;
  val && (bits += 2);
  val = fields.exclusive;
  val && (bits += 4);
  val = fields.nowait;
  val && (bits += 8);
  val = fields.arguments;
  if ("object" != typeof val) {
    if (void 0 !== val) throw new TypeError("Argument 'arguments' wrong type; must be an object");
    val = {};
  }
  buffer[offset] = bits;
  offset++;
  bits = 0;
  offset += encodeTable(buffer, val, offset);
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeBasicConsumeOk(buffer) {
  var val, len, fields = {}, offset = 0;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.consumerTag = val;
  return fields;
}

function encodeBasicConsumeOk(channel, fields) {
  var len, offset = 0, val = null, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3932181, 7);
  offset = 11;
  val = fields.consumerTag;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw void 0 === val ? new Error("Missing value for consumerTag") : new TypeError("Argument 'consumerTag' wrong type; must be a string (up to 255 chars)");
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeBasicCancel(buffer) {
  var val, len, fields = {}, offset = 0;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.consumerTag = val;
  val = !!(1 & buffer[offset]);
  fields.nowait = val;
  return fields;
}

function encodeBasicCancel(channel, fields) {
  var len, offset = 0, val = null, bits = 0, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3932190, 7);
  offset = 11;
  val = fields.consumerTag;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw void 0 === val ? new Error("Missing value for consumerTag") : new TypeError("Argument 'consumerTag' wrong type; must be a string (up to 255 chars)");
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.nowait;
  val && (bits += 1);
  buffer[offset] = bits;
  offset++;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeBasicCancelOk(buffer) {
  var val, len, fields = {}, offset = 0;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.consumerTag = val;
  return fields;
}

function encodeBasicCancelOk(channel, fields) {
  var len, offset = 0, val = null, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3932191, 7);
  offset = 11;
  val = fields.consumerTag;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw void 0 === val ? new Error("Missing value for consumerTag") : new TypeError("Argument 'consumerTag' wrong type; must be a string (up to 255 chars)");
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeBasicPublish(buffer) {
  var val, len, fields = {}, offset = 0;
  val = buffer.readUInt16BE(offset);
  offset += 2;
  fields.ticket = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.exchange = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.routingKey = val;
  val = !!(1 & buffer[offset]);
  fields.mandatory = val;
  val = !!(2 & buffer[offset]);
  fields.immediate = val;
  return fields;
}

function encodeBasicPublish(channel, fields) {
  var len, offset = 0, val = null, bits = 0, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3932200, 7);
  offset = 11;
  val = fields.ticket;
  if ("number" != typeof val || isNaN(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'ticket' wrong type; must be a number (but not NaN)");
    val = 0;
  }
  buffer.writeUInt16BE(val, offset);
  offset += 2;
  val = fields.exchange;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) {
    if (void 0 !== val) throw new TypeError("Argument 'exchange' wrong type; must be a string (up to 255 chars)");
    val = "";
  }
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.routingKey;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) {
    if (void 0 !== val) throw new TypeError("Argument 'routingKey' wrong type; must be a string (up to 255 chars)");
    val = "";
  }
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.mandatory;
  val && (bits += 1);
  val = fields.immediate;
  val && (bits += 2);
  buffer[offset] = bits;
  offset++;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeBasicReturn(buffer) {
  var val, len, fields = {}, offset = 0;
  val = buffer.readUInt16BE(offset);
  offset += 2;
  fields.replyCode = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.replyText = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.exchange = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.routingKey = val;
  return fields;
}

function encodeBasicReturn(channel, fields) {
  var len, offset = 0, val = null, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3932210, 7);
  offset = 11;
  val = fields.replyCode;
  if ("number" != typeof val || isNaN(val)) throw void 0 === val ? new Error("Missing value for replyCode") : new TypeError("Argument 'replyCode' wrong type; must be a number (but not NaN)");
  buffer.writeUInt16BE(val, offset);
  offset += 2;
  val = fields.replyText;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) {
    if (void 0 !== val) throw new TypeError("Argument 'replyText' wrong type; must be a string (up to 255 chars)");
    val = "";
  }
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.exchange;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw void 0 === val ? new Error("Missing value for exchange") : new TypeError("Argument 'exchange' wrong type; must be a string (up to 255 chars)");
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.routingKey;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw void 0 === val ? new Error("Missing value for routingKey") : new TypeError("Argument 'routingKey' wrong type; must be a string (up to 255 chars)");
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeBasicDeliver(buffer) {
  var val, len, fields = {}, offset = 0;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.consumerTag = val;
  val = ints.readUInt64BE(buffer, offset);
  offset += 8;
  fields.deliveryTag = val;
  val = !!(1 & buffer[offset]);
  fields.redelivered = val;
  offset++;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.exchange = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.routingKey = val;
  return fields;
}

function encodeBasicDeliver(channel, fields) {
  var len, offset = 0, val = null, bits = 0, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3932220, 7);
  offset = 11;
  val = fields.consumerTag;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw void 0 === val ? new Error("Missing value for consumerTag") : new TypeError("Argument 'consumerTag' wrong type; must be a string (up to 255 chars)");
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.deliveryTag;
  if ("number" != typeof val || isNaN(val)) throw void 0 === val ? new Error("Missing value for deliveryTag") : new TypeError("Argument 'deliveryTag' wrong type; must be a number (but not NaN)");
  ints.writeUInt64BE(buffer, val, offset);
  offset += 8;
  val = fields.redelivered;
  val && (bits += 1);
  val = fields.exchange;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw void 0 === val ? new Error("Missing value for exchange") : new TypeError("Argument 'exchange' wrong type; must be a string (up to 255 chars)");
  buffer[offset] = bits;
  offset++;
  bits = 0;
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.routingKey;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw void 0 === val ? new Error("Missing value for routingKey") : new TypeError("Argument 'routingKey' wrong type; must be a string (up to 255 chars)");
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeBasicGet(buffer) {
  var val, len, fields = {}, offset = 0;
  val = buffer.readUInt16BE(offset);
  offset += 2;
  fields.ticket = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.queue = val;
  val = !!(1 & buffer[offset]);
  fields.noAck = val;
  return fields;
}

function encodeBasicGet(channel, fields) {
  var len, offset = 0, val = null, bits = 0, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3932230, 7);
  offset = 11;
  val = fields.ticket;
  if ("number" != typeof val || isNaN(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'ticket' wrong type; must be a number (but not NaN)");
    val = 0;
  }
  buffer.writeUInt16BE(val, offset);
  offset += 2;
  val = fields.queue;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) {
    if (void 0 !== val) throw new TypeError("Argument 'queue' wrong type; must be a string (up to 255 chars)");
    val = "";
  }
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.noAck;
  val && (bits += 1);
  buffer[offset] = bits;
  offset++;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeBasicGetOk(buffer) {
  var val, len, fields = {}, offset = 0;
  val = ints.readUInt64BE(buffer, offset);
  offset += 8;
  fields.deliveryTag = val;
  val = !!(1 & buffer[offset]);
  fields.redelivered = val;
  offset++;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.exchange = val;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.routingKey = val;
  val = buffer.readUInt32BE(offset);
  offset += 4;
  fields.messageCount = val;
  return fields;
}

function encodeBasicGetOk(channel, fields) {
  var len, offset = 0, val = null, bits = 0, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3932231, 7);
  offset = 11;
  val = fields.deliveryTag;
  if ("number" != typeof val || isNaN(val)) throw void 0 === val ? new Error("Missing value for deliveryTag") : new TypeError("Argument 'deliveryTag' wrong type; must be a number (but not NaN)");
  ints.writeUInt64BE(buffer, val, offset);
  offset += 8;
  val = fields.redelivered;
  val && (bits += 1);
  val = fields.exchange;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw void 0 === val ? new Error("Missing value for exchange") : new TypeError("Argument 'exchange' wrong type; must be a string (up to 255 chars)");
  buffer[offset] = bits;
  offset++;
  bits = 0;
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.routingKey;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw void 0 === val ? new Error("Missing value for routingKey") : new TypeError("Argument 'routingKey' wrong type; must be a string (up to 255 chars)");
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  val = fields.messageCount;
  if ("number" != typeof val || isNaN(val)) throw void 0 === val ? new Error("Missing value for messageCount") : new TypeError("Argument 'messageCount' wrong type; must be a number (but not NaN)");
  buffer.writeUInt32BE(val, offset);
  offset += 4;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeBasicGetEmpty(buffer) {
  var val, len, fields = {}, offset = 0;
  len = buffer.readUInt8(offset);
  offset++;
  val = buffer.toString("utf8", offset, offset + len);
  offset += len;
  fields.clusterId = val;
  return fields;
}

function encodeBasicGetEmpty(channel, fields) {
  var len, offset = 0, val = null, buffer = new Buffer(2048);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3932232, 7);
  offset = 11;
  val = fields.clusterId;
  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) {
    if (void 0 !== val) throw new TypeError("Argument 'clusterId' wrong type; must be a string (up to 255 chars)");
    val = "";
  }
  len = Buffer.byteLength(val, "utf8");
  buffer[offset] = len;
  offset++;
  buffer.write(val, offset, "utf8");
  offset += len;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer.slice(0, offset + 1);
}

function decodeBasicAck(buffer) {
  var val, fields = {}, offset = 0;
  val = ints.readUInt64BE(buffer, offset);
  offset += 8;
  fields.deliveryTag = val;
  val = !!(1 & buffer[offset]);
  fields.multiple = val;
  return fields;
}

function encodeBasicAck(channel, fields) {
  var offset = 0, val = null, bits = 0, buffer = new Buffer(21);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3932240, 7);
  offset = 11;
  val = fields.deliveryTag;
  if ("number" != typeof val || isNaN(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'deliveryTag' wrong type; must be a number (but not NaN)");
    val = 0;
  }
  ints.writeUInt64BE(buffer, val, offset);
  offset += 8;
  val = fields.multiple;
  val && (bits += 1);
  buffer[offset] = bits;
  offset++;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeBasicReject(buffer) {
  var val, fields = {}, offset = 0;
  val = ints.readUInt64BE(buffer, offset);
  offset += 8;
  fields.deliveryTag = val;
  val = !!(1 & buffer[offset]);
  fields.requeue = val;
  return fields;
}

function encodeBasicReject(channel, fields) {
  var offset = 0, val = null, bits = 0, buffer = new Buffer(21);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3932250, 7);
  offset = 11;
  val = fields.deliveryTag;
  if ("number" != typeof val || isNaN(val)) throw void 0 === val ? new Error("Missing value for deliveryTag") : new TypeError("Argument 'deliveryTag' wrong type; must be a number (but not NaN)");
  ints.writeUInt64BE(buffer, val, offset);
  offset += 8;
  val = fields.requeue;
  val && (bits += 1);
  buffer[offset] = bits;
  offset++;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeBasicRecoverAsync(buffer) {
  var val, fields = {}, offset = 0;
  val = !!(1 & buffer[offset]);
  fields.requeue = val;
  return fields;
}

function encodeBasicRecoverAsync(channel, fields) {
  var offset = 0, val = null, bits = 0, buffer = new Buffer(13);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3932260, 7);
  offset = 11;
  val = fields.requeue;
  val && (bits += 1);
  buffer[offset] = bits;
  offset++;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeBasicRecover(buffer) {
  var val, fields = {}, offset = 0;
  val = !!(1 & buffer[offset]);
  fields.requeue = val;
  return fields;
}

function encodeBasicRecover(channel, fields) {
  var offset = 0, val = null, bits = 0, buffer = new Buffer(13);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3932270, 7);
  offset = 11;
  val = fields.requeue;
  val && (bits += 1);
  buffer[offset] = bits;
  offset++;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeBasicRecoverOk() {
  var fields = {};
  return fields;
}

function encodeBasicRecoverOk(channel) {
  var offset = 0, buffer = new Buffer(12);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3932271, 7);
  offset = 11;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeBasicNack(buffer) {
  var val, fields = {}, offset = 0;
  val = ints.readUInt64BE(buffer, offset);
  offset += 8;
  fields.deliveryTag = val;
  val = !!(1 & buffer[offset]);
  fields.multiple = val;
  val = !!(2 & buffer[offset]);
  fields.requeue = val;
  return fields;
}

function encodeBasicNack(channel, fields) {
  var offset = 0, val = null, bits = 0, buffer = new Buffer(21);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3932280, 7);
  offset = 11;
  val = fields.deliveryTag;
  if ("number" != typeof val || isNaN(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'deliveryTag' wrong type; must be a number (but not NaN)");
    val = 0;
  }
  ints.writeUInt64BE(buffer, val, offset);
  offset += 8;
  val = fields.multiple;
  val && (bits += 1);
  val = fields.requeue;
  val && (bits += 2);
  buffer[offset] = bits;
  offset++;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeTxSelect() {
  var fields = {};
  return fields;
}

function encodeTxSelect(channel) {
  var offset = 0, buffer = new Buffer(12);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(5898250, 7);
  offset = 11;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeTxSelectOk() {
  var fields = {};
  return fields;
}

function encodeTxSelectOk(channel) {
  var offset = 0, buffer = new Buffer(12);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(5898251, 7);
  offset = 11;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeTxCommit() {
  var fields = {};
  return fields;
}

function encodeTxCommit(channel) {
  var offset = 0, buffer = new Buffer(12);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(5898260, 7);
  offset = 11;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeTxCommitOk() {
  var fields = {};
  return fields;
}

function encodeTxCommitOk(channel) {
  var offset = 0, buffer = new Buffer(12);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(5898261, 7);
  offset = 11;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeTxRollback() {
  var fields = {};
  return fields;
}

function encodeTxRollback(channel) {
  var offset = 0, buffer = new Buffer(12);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(5898270, 7);
  offset = 11;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeTxRollbackOk() {
  var fields = {};
  return fields;
}

function encodeTxRollbackOk(channel) {
  var offset = 0, buffer = new Buffer(12);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(5898271, 7);
  offset = 11;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeConfirmSelect(buffer) {
  var val, fields = {}, offset = 0;
  val = !!(1 & buffer[offset]);
  fields.nowait = val;
  return fields;
}

function encodeConfirmSelect(channel, fields) {
  var offset = 0, val = null, bits = 0, buffer = new Buffer(13);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(5570570, 7);
  offset = 11;
  val = fields.nowait;
  val && (bits += 1);
  buffer[offset] = bits;
  offset++;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function decodeConfirmSelectOk() {
  var fields = {};
  return fields;
}

function encodeConfirmSelectOk(channel) {
  var offset = 0, buffer = new Buffer(12);
  buffer[0] = 1;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(5570571, 7);
  offset = 11;
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  return buffer;
}

function encodeBasicProperties(channel, size, fields) {
  var val, len, offset = 0, flags = 0, buffer = new Buffer(2048);
  buffer[0] = 2;
  buffer.writeUInt16BE(channel, 1);
  buffer.writeUInt32BE(3932160, 7);
  ints.writeUInt64BE(buffer, size, 11);
  flags = 0;
  offset = 21;
  val = fields.contentType;
  if ("string" == typeof val && Buffer.byteLength(val) < 256) {
    flags += 32768;
    len = Buffer.byteLength(val, "utf8");
    buffer[offset] = len;
    offset++;
    buffer.write(val, offset, "utf8");
    offset += len;
  } else if (void 0 !== val) throw new TypeError("Argument 'contentType' is the wrong type; must be a string (up to 255 chars)");
  val = fields.contentEncoding;
  if ("string" == typeof val && Buffer.byteLength(val) < 256) {
    flags += 16384;
    len = Buffer.byteLength(val, "utf8");
    buffer[offset] = len;
    offset++;
    buffer.write(val, offset, "utf8");
    offset += len;
  } else if (void 0 !== val) throw new TypeError("Argument 'contentEncoding' is the wrong type; must be a string (up to 255 chars)");
  val = fields.headers;
  if ("object" == typeof val) {
    flags += 8192;
    offset += encodeTable(buffer, val, offset);
  } else if (void 0 !== val) throw new TypeError("Argument 'headers' is the wrong type; must be an object");
  val = fields.deliveryMode;
  if ("number" != typeof val || isNaN(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'deliveryMode' is the wrong type; must be a number (but not NaN)");
  } else {
    flags += 4096;
    buffer.writeUInt8(val, offset);
    offset++;
  }
  val = fields.priority;
  if ("number" != typeof val || isNaN(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'priority' is the wrong type; must be a number (but not NaN)");
  } else {
    flags += 2048;
    buffer.writeUInt8(val, offset);
    offset++;
  }
  val = fields.correlationId;
  if ("string" == typeof val && Buffer.byteLength(val) < 256) {
    flags += 1024;
    len = Buffer.byteLength(val, "utf8");
    buffer[offset] = len;
    offset++;
    buffer.write(val, offset, "utf8");
    offset += len;
  } else if (void 0 !== val) throw new TypeError("Argument 'correlationId' is the wrong type; must be a string (up to 255 chars)");
  val = fields.replyTo;
  if ("string" == typeof val && Buffer.byteLength(val) < 256) {
    flags += 512;
    len = Buffer.byteLength(val, "utf8");
    buffer[offset] = len;
    offset++;
    buffer.write(val, offset, "utf8");
    offset += len;
  } else if (void 0 !== val) throw new TypeError("Argument 'replyTo' is the wrong type; must be a string (up to 255 chars)");
  val = fields.expiration;
  if ("string" == typeof val && Buffer.byteLength(val) < 256) {
    flags += 256;
    len = Buffer.byteLength(val, "utf8");
    buffer[offset] = len;
    offset++;
    buffer.write(val, offset, "utf8");
    offset += len;
  } else if (void 0 !== val) throw new TypeError("Argument 'expiration' is the wrong type; must be a string (up to 255 chars)");
  val = fields.messageId;
  if ("string" == typeof val && Buffer.byteLength(val) < 256) {
    flags += 128;
    len = Buffer.byteLength(val, "utf8");
    buffer[offset] = len;
    offset++;
    buffer.write(val, offset, "utf8");
    offset += len;
  } else if (void 0 !== val) throw new TypeError("Argument 'messageId' is the wrong type; must be a string (up to 255 chars)");
  val = fields.timestamp;
  if ("number" != typeof val || isNaN(val)) {
    if (void 0 !== val) throw new TypeError("Argument 'timestamp' is the wrong type; must be a number (but not NaN)");
  } else {
    flags += 64;
    ints.writeUInt64BE(buffer, val, offset);
    offset += 8;
  }
  val = fields.type;
  if ("string" == typeof val && Buffer.byteLength(val) < 256) {
    flags += 32;
    len = Buffer.byteLength(val, "utf8");
    buffer[offset] = len;
    offset++;
    buffer.write(val, offset, "utf8");
    offset += len;
  } else if (void 0 !== val) throw new TypeError("Argument 'type' is the wrong type; must be a string (up to 255 chars)");
  val = fields.userId;
  if ("string" == typeof val && Buffer.byteLength(val) < 256) {
    flags += 16;
    len = Buffer.byteLength(val, "utf8");
    buffer[offset] = len;
    offset++;
    buffer.write(val, offset, "utf8");
    offset += len;
  } else if (void 0 !== val) throw new TypeError("Argument 'userId' is the wrong type; must be a string (up to 255 chars)");
  val = fields.appId;
  if ("string" == typeof val && Buffer.byteLength(val) < 256) {
    flags += 8;
    len = Buffer.byteLength(val, "utf8");
    buffer[offset] = len;
    offset++;
    buffer.write(val, offset, "utf8");
    offset += len;
  } else if (void 0 !== val) throw new TypeError("Argument 'appId' is the wrong type; must be a string (up to 255 chars)");
  val = fields.clusterId;
  if ("string" == typeof val && Buffer.byteLength(val) < 256) {
    flags += 4;
    len = Buffer.byteLength(val, "utf8");
    buffer[offset] = len;
    offset++;
    buffer.write(val, offset, "utf8");
    offset += len;
  } else if (void 0 !== val) throw new TypeError("Argument 'clusterId' is the wrong type; must be a string (up to 255 chars)");
  buffer[offset] = 206;
  buffer.writeUInt32BE(offset - 7, 3);
  buffer.writeUInt16BE(flags, 19);
  return buffer.slice(0, offset + 1);
}

function decodeBasicProperties(buffer) {
  var flags, val, len, fields = {}, offset = 2;
  flags = buffer.readUInt16BE(0);
  if (32768 & flags) {
    len = buffer.readUInt8(offset);
    offset++;
    val = buffer.toString("utf8", offset, offset + len);
    offset += len;
    fields.contentType = val;
  }
  if (16384 & flags) {
    len = buffer.readUInt8(offset);
    offset++;
    val = buffer.toString("utf8", offset, offset + len);
    offset += len;
    fields.contentEncoding = val;
  }
  if (8192 & flags) {
    len = buffer.readUInt32BE(offset);
    offset += 4;
    val = decodeFields(buffer.slice(offset, offset + len));
    offset += len;
    fields.headers = val;
  }
  if (4096 & flags) {
    val = buffer[offset];
    offset++;
    fields.deliveryMode = val;
  }
  if (2048 & flags) {
    val = buffer[offset];
    offset++;
    fields.priority = val;
  }
  if (1024 & flags) {
    len = buffer.readUInt8(offset);
    offset++;
    val = buffer.toString("utf8", offset, offset + len);
    offset += len;
    fields.correlationId = val;
  }
  if (512 & flags) {
    len = buffer.readUInt8(offset);
    offset++;
    val = buffer.toString("utf8", offset, offset + len);
    offset += len;
    fields.replyTo = val;
  }
  if (256 & flags) {
    len = buffer.readUInt8(offset);
    offset++;
    val = buffer.toString("utf8", offset, offset + len);
    offset += len;
    fields.expiration = val;
  }
  if (128 & flags) {
    len = buffer.readUInt8(offset);
    offset++;
    val = buffer.toString("utf8", offset, offset + len);
    offset += len;
    fields.messageId = val;
  }
  if (64 & flags) {
    val = ints.readUInt64BE(buffer, offset);
    offset += 8;
    fields.timestamp = val;
  }
  if (32 & flags) {
    len = buffer.readUInt8(offset);
    offset++;
    val = buffer.toString("utf8", offset, offset + len);
    offset += len;
    fields.type = val;
  }
  if (16 & flags) {
    len = buffer.readUInt8(offset);
    offset++;
    val = buffer.toString("utf8", offset, offset + len);
    offset += len;
    fields.userId = val;
  }
  if (8 & flags) {
    len = buffer.readUInt8(offset);
    offset++;
    val = buffer.toString("utf8", offset, offset + len);
    offset += len;
    fields.appId = val;
  }
  if (4 & flags) {
    len = buffer.readUInt8(offset);
    offset++;
    val = buffer.toString("utf8", offset, offset + len);
    offset += len;
    fields.clusterId = val;
  }
  return fields;
}

var codec = require("./codec"), ints = require("buffer-more-ints"), encodeTable = codec.encodeTable, decodeFields = codec.decodeFields;

module.exports.constants = {
  FRAME_METHOD: 1,
  FRAME_HEADER: 2,
  FRAME_BODY: 3,
  FRAME_HEARTBEAT: 8,
  FRAME_MIN_SIZE: 4096,
  FRAME_END: 206,
  REPLY_SUCCESS: 200,
  CONTENT_TOO_LARGE: 311,
  NO_ROUTE: 312,
  NO_CONSUMERS: 313,
  ACCESS_REFUSED: 403,
  NOT_FOUND: 404,
  RESOURCE_LOCKED: 405,
  PRECONDITION_FAILED: 406,
  CONNECTION_FORCED: 320,
  INVALID_PATH: 402,
  FRAME_ERROR: 501,
  SYNTAX_ERROR: 502,
  COMMAND_INVALID: 503,
  CHANNEL_ERROR: 504,
  UNEXPECTED_FRAME: 505,
  RESOURCE_ERROR: 506,
  NOT_ALLOWED: 530,
  NOT_IMPLEMENTED: 540,
  INTERNAL_ERROR: 541
};

module.exports.decode = function(id, buf) {
  switch (id) {
   case 655370:
    return decodeConnectionStart(buf);

   case 655371:
    return decodeConnectionStartOk(buf);

   case 655380:
    return decodeConnectionSecure(buf);

   case 655381:
    return decodeConnectionSecureOk(buf);

   case 655390:
    return decodeConnectionTune(buf);

   case 655391:
    return decodeConnectionTuneOk(buf);

   case 655400:
    return decodeConnectionOpen(buf);

   case 655401:
    return decodeConnectionOpenOk(buf);

   case 655410:
    return decodeConnectionClose(buf);

   case 655411:
    return decodeConnectionCloseOk(buf);

   case 1310730:
    return decodeChannelOpen(buf);

   case 1310731:
    return decodeChannelOpenOk(buf);

   case 1310740:
    return decodeChannelFlow(buf);

   case 1310741:
    return decodeChannelFlowOk(buf);

   case 1310760:
    return decodeChannelClose(buf);

   case 1310761:
    return decodeChannelCloseOk(buf);

   case 1966090:
    return decodeAccessRequest(buf);

   case 1966091:
    return decodeAccessRequestOk(buf);

   case 2621450:
    return decodeExchangeDeclare(buf);

   case 2621451:
    return decodeExchangeDeclareOk(buf);

   case 2621460:
    return decodeExchangeDelete(buf);

   case 2621461:
    return decodeExchangeDeleteOk(buf);

   case 2621470:
    return decodeExchangeBind(buf);

   case 2621471:
    return decodeExchangeBindOk(buf);

   case 2621480:
    return decodeExchangeUnbind(buf);

   case 2621491:
    return decodeExchangeUnbindOk(buf);

   case 3276810:
    return decodeQueueDeclare(buf);

   case 3276811:
    return decodeQueueDeclareOk(buf);

   case 3276820:
    return decodeQueueBind(buf);

   case 3276821:
    return decodeQueueBindOk(buf);

   case 3276830:
    return decodeQueuePurge(buf);

   case 3276831:
    return decodeQueuePurgeOk(buf);

   case 3276840:
    return decodeQueueDelete(buf);

   case 3276841:
    return decodeQueueDeleteOk(buf);

   case 3276850:
    return decodeQueueUnbind(buf);

   case 3276851:
    return decodeQueueUnbindOk(buf);

   case 3932170:
    return decodeBasicQos(buf);

   case 3932171:
    return decodeBasicQosOk(buf);

   case 3932180:
    return decodeBasicConsume(buf);

   case 3932181:
    return decodeBasicConsumeOk(buf);

   case 3932190:
    return decodeBasicCancel(buf);

   case 3932191:
    return decodeBasicCancelOk(buf);

   case 3932200:
    return decodeBasicPublish(buf);

   case 3932210:
    return decodeBasicReturn(buf);

   case 3932220:
    return decodeBasicDeliver(buf);

   case 3932230:
    return decodeBasicGet(buf);

   case 3932231:
    return decodeBasicGetOk(buf);

   case 3932232:
    return decodeBasicGetEmpty(buf);

   case 3932240:
    return decodeBasicAck(buf);

   case 3932250:
    return decodeBasicReject(buf);

   case 3932260:
    return decodeBasicRecoverAsync(buf);

   case 3932270:
    return decodeBasicRecover(buf);

   case 3932271:
    return decodeBasicRecoverOk(buf);

   case 3932280:
    return decodeBasicNack(buf);

   case 5898250:
    return decodeTxSelect(buf);

   case 5898251:
    return decodeTxSelectOk(buf);

   case 5898260:
    return decodeTxCommit(buf);

   case 5898261:
    return decodeTxCommitOk(buf);

   case 5898270:
    return decodeTxRollback(buf);

   case 5898271:
    return decodeTxRollbackOk(buf);

   case 5570570:
    return decodeConfirmSelect(buf);

   case 5570571:
    return decodeConfirmSelectOk(buf);

   case 60:
    return decodeBasicProperties(buf);

   default:
    throw new Error("Unknown class/method ID");
  }
};

module.exports.encodeMethod = function(id, channel, fields) {
  switch (id) {
   case 655370:
    return encodeConnectionStart(channel, fields);

   case 655371:
    return encodeConnectionStartOk(channel, fields);

   case 655380:
    return encodeConnectionSecure(channel, fields);

   case 655381:
    return encodeConnectionSecureOk(channel, fields);

   case 655390:
    return encodeConnectionTune(channel, fields);

   case 655391:
    return encodeConnectionTuneOk(channel, fields);

   case 655400:
    return encodeConnectionOpen(channel, fields);

   case 655401:
    return encodeConnectionOpenOk(channel, fields);

   case 655410:
    return encodeConnectionClose(channel, fields);

   case 655411:
    return encodeConnectionCloseOk(channel, fields);

   case 1310730:
    return encodeChannelOpen(channel, fields);

   case 1310731:
    return encodeChannelOpenOk(channel, fields);

   case 1310740:
    return encodeChannelFlow(channel, fields);

   case 1310741:
    return encodeChannelFlowOk(channel, fields);

   case 1310760:
    return encodeChannelClose(channel, fields);

   case 1310761:
    return encodeChannelCloseOk(channel, fields);

   case 1966090:
    return encodeAccessRequest(channel, fields);

   case 1966091:
    return encodeAccessRequestOk(channel, fields);

   case 2621450:
    return encodeExchangeDeclare(channel, fields);

   case 2621451:
    return encodeExchangeDeclareOk(channel, fields);

   case 2621460:
    return encodeExchangeDelete(channel, fields);

   case 2621461:
    return encodeExchangeDeleteOk(channel, fields);

   case 2621470:
    return encodeExchangeBind(channel, fields);

   case 2621471:
    return encodeExchangeBindOk(channel, fields);

   case 2621480:
    return encodeExchangeUnbind(channel, fields);

   case 2621491:
    return encodeExchangeUnbindOk(channel, fields);

   case 3276810:
    return encodeQueueDeclare(channel, fields);

   case 3276811:
    return encodeQueueDeclareOk(channel, fields);

   case 3276820:
    return encodeQueueBind(channel, fields);

   case 3276821:
    return encodeQueueBindOk(channel, fields);

   case 3276830:
    return encodeQueuePurge(channel, fields);

   case 3276831:
    return encodeQueuePurgeOk(channel, fields);

   case 3276840:
    return encodeQueueDelete(channel, fields);

   case 3276841:
    return encodeQueueDeleteOk(channel, fields);

   case 3276850:
    return encodeQueueUnbind(channel, fields);

   case 3276851:
    return encodeQueueUnbindOk(channel, fields);

   case 3932170:
    return encodeBasicQos(channel, fields);

   case 3932171:
    return encodeBasicQosOk(channel, fields);

   case 3932180:
    return encodeBasicConsume(channel, fields);

   case 3932181:
    return encodeBasicConsumeOk(channel, fields);

   case 3932190:
    return encodeBasicCancel(channel, fields);

   case 3932191:
    return encodeBasicCancelOk(channel, fields);

   case 3932200:
    return encodeBasicPublish(channel, fields);

   case 3932210:
    return encodeBasicReturn(channel, fields);

   case 3932220:
    return encodeBasicDeliver(channel, fields);

   case 3932230:
    return encodeBasicGet(channel, fields);

   case 3932231:
    return encodeBasicGetOk(channel, fields);

   case 3932232:
    return encodeBasicGetEmpty(channel, fields);

   case 3932240:
    return encodeBasicAck(channel, fields);

   case 3932250:
    return encodeBasicReject(channel, fields);

   case 3932260:
    return encodeBasicRecoverAsync(channel, fields);

   case 3932270:
    return encodeBasicRecover(channel, fields);

   case 3932271:
    return encodeBasicRecoverOk(channel, fields);

   case 3932280:
    return encodeBasicNack(channel, fields);

   case 5898250:
    return encodeTxSelect(channel, fields);

   case 5898251:
    return encodeTxSelectOk(channel, fields);

   case 5898260:
    return encodeTxCommit(channel, fields);

   case 5898261:
    return encodeTxCommitOk(channel, fields);

   case 5898270:
    return encodeTxRollback(channel, fields);

   case 5898271:
    return encodeTxRollbackOk(channel, fields);

   case 5570570:
    return encodeConfirmSelect(channel, fields);

   case 5570571:
    return encodeConfirmSelectOk(channel, fields);

   default:
    throw new Error("Unknown class/method ID");
  }
};

module.exports.encodeProperties = function(id, channel, size, fields) {
  switch (id) {
   case 60:
    return encodeBasicProperties(channel, size, fields);

   default:
    throw new Error("Unknown class/properties ID");
  }
};

module.exports.info = function(id) {
  switch (id) {
   case 655370:
    return methodInfoConnectionStart;

   case 655371:
    return methodInfoConnectionStartOk;

   case 655380:
    return methodInfoConnectionSecure;

   case 655381:
    return methodInfoConnectionSecureOk;

   case 655390:
    return methodInfoConnectionTune;

   case 655391:
    return methodInfoConnectionTuneOk;

   case 655400:
    return methodInfoConnectionOpen;

   case 655401:
    return methodInfoConnectionOpenOk;

   case 655410:
    return methodInfoConnectionClose;

   case 655411:
    return methodInfoConnectionCloseOk;

   case 1310730:
    return methodInfoChannelOpen;

   case 1310731:
    return methodInfoChannelOpenOk;

   case 1310740:
    return methodInfoChannelFlow;

   case 1310741:
    return methodInfoChannelFlowOk;

   case 1310760:
    return methodInfoChannelClose;

   case 1310761:
    return methodInfoChannelCloseOk;

   case 1966090:
    return methodInfoAccessRequest;

   case 1966091:
    return methodInfoAccessRequestOk;

   case 2621450:
    return methodInfoExchangeDeclare;

   case 2621451:
    return methodInfoExchangeDeclareOk;

   case 2621460:
    return methodInfoExchangeDelete;

   case 2621461:
    return methodInfoExchangeDeleteOk;

   case 2621470:
    return methodInfoExchangeBind;

   case 2621471:
    return methodInfoExchangeBindOk;

   case 2621480:
    return methodInfoExchangeUnbind;

   case 2621491:
    return methodInfoExchangeUnbindOk;

   case 3276810:
    return methodInfoQueueDeclare;

   case 3276811:
    return methodInfoQueueDeclareOk;

   case 3276820:
    return methodInfoQueueBind;

   case 3276821:
    return methodInfoQueueBindOk;

   case 3276830:
    return methodInfoQueuePurge;

   case 3276831:
    return methodInfoQueuePurgeOk;

   case 3276840:
    return methodInfoQueueDelete;

   case 3276841:
    return methodInfoQueueDeleteOk;

   case 3276850:
    return methodInfoQueueUnbind;

   case 3276851:
    return methodInfoQueueUnbindOk;

   case 3932170:
    return methodInfoBasicQos;

   case 3932171:
    return methodInfoBasicQosOk;

   case 3932180:
    return methodInfoBasicConsume;

   case 3932181:
    return methodInfoBasicConsumeOk;

   case 3932190:
    return methodInfoBasicCancel;

   case 3932191:
    return methodInfoBasicCancelOk;

   case 3932200:
    return methodInfoBasicPublish;

   case 3932210:
    return methodInfoBasicReturn;

   case 3932220:
    return methodInfoBasicDeliver;

   case 3932230:
    return methodInfoBasicGet;

   case 3932231:
    return methodInfoBasicGetOk;

   case 3932232:
    return methodInfoBasicGetEmpty;

   case 3932240:
    return methodInfoBasicAck;

   case 3932250:
    return methodInfoBasicReject;

   case 3932260:
    return methodInfoBasicRecoverAsync;

   case 3932270:
    return methodInfoBasicRecover;

   case 3932271:
    return methodInfoBasicRecoverOk;

   case 3932280:
    return methodInfoBasicNack;

   case 5898250:
    return methodInfoTxSelect;

   case 5898251:
    return methodInfoTxSelectOk;

   case 5898260:
    return methodInfoTxCommit;

   case 5898261:
    return methodInfoTxCommitOk;

   case 5898270:
    return methodInfoTxRollback;

   case 5898271:
    return methodInfoTxRollbackOk;

   case 5570570:
    return methodInfoConfirmSelect;

   case 5570571:
    return methodInfoConfirmSelectOk;

   case 60:
    return propertiesInfoBasicProperties;

   default:
    throw new Error("Unknown class/method ID");
  }
};

module.exports.ConnectionStart = 655370;

var methodInfoConnectionStart = module.exports.methodInfoConnectionStart = {
  id: 655370,
  name: "ConnectionStart",
  args: [ {
    type: "octet",
    name: "versionMajor",
    "default": 0
  }, {
    type: "octet",
    name: "versionMinor",
    "default": 9
  }, {
    type: "table",
    name: "serverProperties"
  }, {
    type: "longstr",
    name: "mechanisms",
    "default": "PLAIN"
  }, {
    type: "longstr",
    name: "locales",
    "default": "en_US"
  } ]
};

module.exports.ConnectionStartOk = 655371;

var methodInfoConnectionStartOk = module.exports.methodInfoConnectionStartOk = {
  id: 655371,
  name: "ConnectionStartOk",
  args: [ {
    type: "table",
    name: "clientProperties"
  }, {
    type: "shortstr",
    name: "mechanism",
    "default": "PLAIN"
  }, {
    type: "longstr",
    name: "response"
  }, {
    type: "shortstr",
    name: "locale",
    "default": "en_US"
  } ]
};

module.exports.ConnectionSecure = 655380;

var methodInfoConnectionSecure = module.exports.methodInfoConnectionSecure = {
  id: 655380,
  name: "ConnectionSecure",
  args: [ {
    type: "longstr",
    name: "challenge"
  } ]
};

module.exports.ConnectionSecureOk = 655381;

var methodInfoConnectionSecureOk = module.exports.methodInfoConnectionSecureOk = {
  id: 655381,
  name: "ConnectionSecureOk",
  args: [ {
    type: "longstr",
    name: "response"
  } ]
};

module.exports.ConnectionTune = 655390;

var methodInfoConnectionTune = module.exports.methodInfoConnectionTune = {
  id: 655390,
  name: "ConnectionTune",
  args: [ {
    type: "short",
    name: "channelMax",
    "default": 0
  }, {
    type: "long",
    name: "frameMax",
    "default": 0
  }, {
    type: "short",
    name: "heartbeat",
    "default": 0
  } ]
};

module.exports.ConnectionTuneOk = 655391;

var methodInfoConnectionTuneOk = module.exports.methodInfoConnectionTuneOk = {
  id: 655391,
  name: "ConnectionTuneOk",
  args: [ {
    type: "short",
    name: "channelMax",
    "default": 0
  }, {
    type: "long",
    name: "frameMax",
    "default": 0
  }, {
    type: "short",
    name: "heartbeat",
    "default": 0
  } ]
};

module.exports.ConnectionOpen = 655400;

var methodInfoConnectionOpen = module.exports.methodInfoConnectionOpen = {
  id: 655400,
  name: "ConnectionOpen",
  args: [ {
    type: "shortstr",
    name: "virtualHost",
    "default": "/"
  }, {
    type: "shortstr",
    name: "capabilities",
    "default": ""
  }, {
    type: "bit",
    name: "insist",
    "default": !1
  } ]
};

module.exports.ConnectionOpenOk = 655401;

var methodInfoConnectionOpenOk = module.exports.methodInfoConnectionOpenOk = {
  id: 655401,
  name: "ConnectionOpenOk",
  args: [ {
    type: "shortstr",
    name: "knownHosts",
    "default": ""
  } ]
};

module.exports.ConnectionClose = 655410;

var methodInfoConnectionClose = module.exports.methodInfoConnectionClose = {
  id: 655410,
  name: "ConnectionClose",
  args: [ {
    type: "short",
    name: "replyCode"
  }, {
    type: "shortstr",
    name: "replyText",
    "default": ""
  }, {
    type: "short",
    name: "classId"
  }, {
    type: "short",
    name: "methodId"
  } ]
};

module.exports.ConnectionCloseOk = 655411;

var methodInfoConnectionCloseOk = module.exports.methodInfoConnectionCloseOk = {
  id: 655411,
  name: "ConnectionCloseOk",
  args: []
};

module.exports.ChannelOpen = 1310730;

var methodInfoChannelOpen = module.exports.methodInfoChannelOpen = {
  id: 1310730,
  name: "ChannelOpen",
  args: [ {
    type: "shortstr",
    name: "outOfBand",
    "default": ""
  } ]
};

module.exports.ChannelOpenOk = 1310731;

var methodInfoChannelOpenOk = module.exports.methodInfoChannelOpenOk = {
  id: 1310731,
  name: "ChannelOpenOk",
  args: [ {
    type: "longstr",
    name: "channelId",
    "default": ""
  } ]
};

module.exports.ChannelFlow = 1310740;

var methodInfoChannelFlow = module.exports.methodInfoChannelFlow = {
  id: 1310740,
  name: "ChannelFlow",
  args: [ {
    type: "bit",
    name: "active"
  } ]
};

module.exports.ChannelFlowOk = 1310741;

var methodInfoChannelFlowOk = module.exports.methodInfoChannelFlowOk = {
  id: 1310741,
  name: "ChannelFlowOk",
  args: [ {
    type: "bit",
    name: "active"
  } ]
};

module.exports.ChannelClose = 1310760;

var methodInfoChannelClose = module.exports.methodInfoChannelClose = {
  id: 1310760,
  name: "ChannelClose",
  args: [ {
    type: "short",
    name: "replyCode"
  }, {
    type: "shortstr",
    name: "replyText",
    "default": ""
  }, {
    type: "short",
    name: "classId"
  }, {
    type: "short",
    name: "methodId"
  } ]
};

module.exports.ChannelCloseOk = 1310761;

var methodInfoChannelCloseOk = module.exports.methodInfoChannelCloseOk = {
  id: 1310761,
  name: "ChannelCloseOk",
  args: []
};

module.exports.AccessRequest = 1966090;

var methodInfoAccessRequest = module.exports.methodInfoAccessRequest = {
  id: 1966090,
  name: "AccessRequest",
  args: [ {
    type: "shortstr",
    name: "realm",
    "default": "/data"
  }, {
    type: "bit",
    name: "exclusive",
    "default": !1
  }, {
    type: "bit",
    name: "passive",
    "default": !0
  }, {
    type: "bit",
    name: "active",
    "default": !0
  }, {
    type: "bit",
    name: "write",
    "default": !0
  }, {
    type: "bit",
    name: "read",
    "default": !0
  } ]
};

module.exports.AccessRequestOk = 1966091;

var methodInfoAccessRequestOk = module.exports.methodInfoAccessRequestOk = {
  id: 1966091,
  name: "AccessRequestOk",
  args: [ {
    type: "short",
    name: "ticket",
    "default": 1
  } ]
};

module.exports.ExchangeDeclare = 2621450;

var methodInfoExchangeDeclare = module.exports.methodInfoExchangeDeclare = {
  id: 2621450,
  name: "ExchangeDeclare",
  args: [ {
    type: "short",
    name: "ticket",
    "default": 0
  }, {
    type: "shortstr",
    name: "exchange"
  }, {
    type: "shortstr",
    name: "type",
    "default": "direct"
  }, {
    type: "bit",
    name: "passive",
    "default": !1
  }, {
    type: "bit",
    name: "durable",
    "default": !1
  }, {
    type: "bit",
    name: "autoDelete",
    "default": !1
  }, {
    type: "bit",
    name: "internal",
    "default": !1
  }, {
    type: "bit",
    name: "nowait",
    "default": !1
  }, {
    type: "table",
    name: "arguments",
    "default": {}
  } ]
};

module.exports.ExchangeDeclareOk = 2621451;

var methodInfoExchangeDeclareOk = module.exports.methodInfoExchangeDeclareOk = {
  id: 2621451,
  name: "ExchangeDeclareOk",
  args: []
};

module.exports.ExchangeDelete = 2621460;

var methodInfoExchangeDelete = module.exports.methodInfoExchangeDelete = {
  id: 2621460,
  name: "ExchangeDelete",
  args: [ {
    type: "short",
    name: "ticket",
    "default": 0
  }, {
    type: "shortstr",
    name: "exchange"
  }, {
    type: "bit",
    name: "ifUnused",
    "default": !1
  }, {
    type: "bit",
    name: "nowait",
    "default": !1
  } ]
};

module.exports.ExchangeDeleteOk = 2621461;

var methodInfoExchangeDeleteOk = module.exports.methodInfoExchangeDeleteOk = {
  id: 2621461,
  name: "ExchangeDeleteOk",
  args: []
};

module.exports.ExchangeBind = 2621470;

var methodInfoExchangeBind = module.exports.methodInfoExchangeBind = {
  id: 2621470,
  name: "ExchangeBind",
  args: [ {
    type: "short",
    name: "ticket",
    "default": 0
  }, {
    type: "shortstr",
    name: "destination"
  }, {
    type: "shortstr",
    name: "source"
  }, {
    type: "shortstr",
    name: "routingKey",
    "default": ""
  }, {
    type: "bit",
    name: "nowait",
    "default": !1
  }, {
    type: "table",
    name: "arguments",
    "default": {}
  } ]
};

module.exports.ExchangeBindOk = 2621471;

var methodInfoExchangeBindOk = module.exports.methodInfoExchangeBindOk = {
  id: 2621471,
  name: "ExchangeBindOk",
  args: []
};

module.exports.ExchangeUnbind = 2621480;

var methodInfoExchangeUnbind = module.exports.methodInfoExchangeUnbind = {
  id: 2621480,
  name: "ExchangeUnbind",
  args: [ {
    type: "short",
    name: "ticket",
    "default": 0
  }, {
    type: "shortstr",
    name: "destination"
  }, {
    type: "shortstr",
    name: "source"
  }, {
    type: "shortstr",
    name: "routingKey",
    "default": ""
  }, {
    type: "bit",
    name: "nowait",
    "default": !1
  }, {
    type: "table",
    name: "arguments",
    "default": {}
  } ]
};

module.exports.ExchangeUnbindOk = 2621491;

var methodInfoExchangeUnbindOk = module.exports.methodInfoExchangeUnbindOk = {
  id: 2621491,
  name: "ExchangeUnbindOk",
  args: []
};

module.exports.QueueDeclare = 3276810;

var methodInfoQueueDeclare = module.exports.methodInfoQueueDeclare = {
  id: 3276810,
  name: "QueueDeclare",
  args: [ {
    type: "short",
    name: "ticket",
    "default": 0
  }, {
    type: "shortstr",
    name: "queue",
    "default": ""
  }, {
    type: "bit",
    name: "passive",
    "default": !1
  }, {
    type: "bit",
    name: "durable",
    "default": !1
  }, {
    type: "bit",
    name: "exclusive",
    "default": !1
  }, {
    type: "bit",
    name: "autoDelete",
    "default": !1
  }, {
    type: "bit",
    name: "nowait",
    "default": !1
  }, {
    type: "table",
    name: "arguments",
    "default": {}
  } ]
};

module.exports.QueueDeclareOk = 3276811;

var methodInfoQueueDeclareOk = module.exports.methodInfoQueueDeclareOk = {
  id: 3276811,
  name: "QueueDeclareOk",
  args: [ {
    type: "shortstr",
    name: "queue"
  }, {
    type: "long",
    name: "messageCount"
  }, {
    type: "long",
    name: "consumerCount"
  } ]
};

module.exports.QueueBind = 3276820;

var methodInfoQueueBind = module.exports.methodInfoQueueBind = {
  id: 3276820,
  name: "QueueBind",
  args: [ {
    type: "short",
    name: "ticket",
    "default": 0
  }, {
    type: "shortstr",
    name: "queue",
    "default": ""
  }, {
    type: "shortstr",
    name: "exchange"
  }, {
    type: "shortstr",
    name: "routingKey",
    "default": ""
  }, {
    type: "bit",
    name: "nowait",
    "default": !1
  }, {
    type: "table",
    name: "arguments",
    "default": {}
  } ]
};

module.exports.QueueBindOk = 3276821;

var methodInfoQueueBindOk = module.exports.methodInfoQueueBindOk = {
  id: 3276821,
  name: "QueueBindOk",
  args: []
};

module.exports.QueuePurge = 3276830;

var methodInfoQueuePurge = module.exports.methodInfoQueuePurge = {
  id: 3276830,
  name: "QueuePurge",
  args: [ {
    type: "short",
    name: "ticket",
    "default": 0
  }, {
    type: "shortstr",
    name: "queue",
    "default": ""
  }, {
    type: "bit",
    name: "nowait",
    "default": !1
  } ]
};

module.exports.QueuePurgeOk = 3276831;

var methodInfoQueuePurgeOk = module.exports.methodInfoQueuePurgeOk = {
  id: 3276831,
  name: "QueuePurgeOk",
  args: [ {
    type: "long",
    name: "messageCount"
  } ]
};

module.exports.QueueDelete = 3276840;

var methodInfoQueueDelete = module.exports.methodInfoQueueDelete = {
  id: 3276840,
  name: "QueueDelete",
  args: [ {
    type: "short",
    name: "ticket",
    "default": 0
  }, {
    type: "shortstr",
    name: "queue",
    "default": ""
  }, {
    type: "bit",
    name: "ifUnused",
    "default": !1
  }, {
    type: "bit",
    name: "ifEmpty",
    "default": !1
  }, {
    type: "bit",
    name: "nowait",
    "default": !1
  } ]
};

module.exports.QueueDeleteOk = 3276841;

var methodInfoQueueDeleteOk = module.exports.methodInfoQueueDeleteOk = {
  id: 3276841,
  name: "QueueDeleteOk",
  args: [ {
    type: "long",
    name: "messageCount"
  } ]
};

module.exports.QueueUnbind = 3276850;

var methodInfoQueueUnbind = module.exports.methodInfoQueueUnbind = {
  id: 3276850,
  name: "QueueUnbind",
  args: [ {
    type: "short",
    name: "ticket",
    "default": 0
  }, {
    type: "shortstr",
    name: "queue",
    "default": ""
  }, {
    type: "shortstr",
    name: "exchange"
  }, {
    type: "shortstr",
    name: "routingKey",
    "default": ""
  }, {
    type: "table",
    name: "arguments",
    "default": {}
  } ]
};

module.exports.QueueUnbindOk = 3276851;

var methodInfoQueueUnbindOk = module.exports.methodInfoQueueUnbindOk = {
  id: 3276851,
  name: "QueueUnbindOk",
  args: []
};

module.exports.BasicQos = 3932170;

var methodInfoBasicQos = module.exports.methodInfoBasicQos = {
  id: 3932170,
  name: "BasicQos",
  args: [ {
    type: "long",
    name: "prefetchSize",
    "default": 0
  }, {
    type: "short",
    name: "prefetchCount",
    "default": 0
  }, {
    type: "bit",
    name: "global",
    "default": !1
  } ]
};

module.exports.BasicQosOk = 3932171;

var methodInfoBasicQosOk = module.exports.methodInfoBasicQosOk = {
  id: 3932171,
  name: "BasicQosOk",
  args: []
};

module.exports.BasicConsume = 3932180;

var methodInfoBasicConsume = module.exports.methodInfoBasicConsume = {
  id: 3932180,
  name: "BasicConsume",
  args: [ {
    type: "short",
    name: "ticket",
    "default": 0
  }, {
    type: "shortstr",
    name: "queue",
    "default": ""
  }, {
    type: "shortstr",
    name: "consumerTag",
    "default": ""
  }, {
    type: "bit",
    name: "noLocal",
    "default": !1
  }, {
    type: "bit",
    name: "noAck",
    "default": !1
  }, {
    type: "bit",
    name: "exclusive",
    "default": !1
  }, {
    type: "bit",
    name: "nowait",
    "default": !1
  }, {
    type: "table",
    name: "arguments",
    "default": {}
  } ]
};

module.exports.BasicConsumeOk = 3932181;

var methodInfoBasicConsumeOk = module.exports.methodInfoBasicConsumeOk = {
  id: 3932181,
  name: "BasicConsumeOk",
  args: [ {
    type: "shortstr",
    name: "consumerTag"
  } ]
};

module.exports.BasicCancel = 3932190;

var methodInfoBasicCancel = module.exports.methodInfoBasicCancel = {
  id: 3932190,
  name: "BasicCancel",
  args: [ {
    type: "shortstr",
    name: "consumerTag"
  }, {
    type: "bit",
    name: "nowait",
    "default": !1
  } ]
};

module.exports.BasicCancelOk = 3932191;

var methodInfoBasicCancelOk = module.exports.methodInfoBasicCancelOk = {
  id: 3932191,
  name: "BasicCancelOk",
  args: [ {
    type: "shortstr",
    name: "consumerTag"
  } ]
};

module.exports.BasicPublish = 3932200;

var methodInfoBasicPublish = module.exports.methodInfoBasicPublish = {
  id: 3932200,
  name: "BasicPublish",
  args: [ {
    type: "short",
    name: "ticket",
    "default": 0
  }, {
    type: "shortstr",
    name: "exchange",
    "default": ""
  }, {
    type: "shortstr",
    name: "routingKey",
    "default": ""
  }, {
    type: "bit",
    name: "mandatory",
    "default": !1
  }, {
    type: "bit",
    name: "immediate",
    "default": !1
  } ]
};

module.exports.BasicReturn = 3932210;

var methodInfoBasicReturn = module.exports.methodInfoBasicReturn = {
  id: 3932210,
  name: "BasicReturn",
  args: [ {
    type: "short",
    name: "replyCode"
  }, {
    type: "shortstr",
    name: "replyText",
    "default": ""
  }, {
    type: "shortstr",
    name: "exchange"
  }, {
    type: "shortstr",
    name: "routingKey"
  } ]
};

module.exports.BasicDeliver = 3932220;

var methodInfoBasicDeliver = module.exports.methodInfoBasicDeliver = {
  id: 3932220,
  name: "BasicDeliver",
  args: [ {
    type: "shortstr",
    name: "consumerTag"
  }, {
    type: "longlong",
    name: "deliveryTag"
  }, {
    type: "bit",
    name: "redelivered",
    "default": !1
  }, {
    type: "shortstr",
    name: "exchange"
  }, {
    type: "shortstr",
    name: "routingKey"
  } ]
};

module.exports.BasicGet = 3932230;

var methodInfoBasicGet = module.exports.methodInfoBasicGet = {
  id: 3932230,
  name: "BasicGet",
  args: [ {
    type: "short",
    name: "ticket",
    "default": 0
  }, {
    type: "shortstr",
    name: "queue",
    "default": ""
  }, {
    type: "bit",
    name: "noAck",
    "default": !1
  } ]
};

module.exports.BasicGetOk = 3932231;

var methodInfoBasicGetOk = module.exports.methodInfoBasicGetOk = {
  id: 3932231,
  name: "BasicGetOk",
  args: [ {
    type: "longlong",
    name: "deliveryTag"
  }, {
    type: "bit",
    name: "redelivered",
    "default": !1
  }, {
    type: "shortstr",
    name: "exchange"
  }, {
    type: "shortstr",
    name: "routingKey"
  }, {
    type: "long",
    name: "messageCount"
  } ]
};

module.exports.BasicGetEmpty = 3932232;

var methodInfoBasicGetEmpty = module.exports.methodInfoBasicGetEmpty = {
  id: 3932232,
  name: "BasicGetEmpty",
  args: [ {
    type: "shortstr",
    name: "clusterId",
    "default": ""
  } ]
};

module.exports.BasicAck = 3932240;

var methodInfoBasicAck = module.exports.methodInfoBasicAck = {
  id: 3932240,
  name: "BasicAck",
  args: [ {
    type: "longlong",
    name: "deliveryTag",
    "default": 0
  }, {
    type: "bit",
    name: "multiple",
    "default": !1
  } ]
};

module.exports.BasicReject = 3932250;

var methodInfoBasicReject = module.exports.methodInfoBasicReject = {
  id: 3932250,
  name: "BasicReject",
  args: [ {
    type: "longlong",
    name: "deliveryTag"
  }, {
    type: "bit",
    name: "requeue",
    "default": !0
  } ]
};

module.exports.BasicRecoverAsync = 3932260;

var methodInfoBasicRecoverAsync = module.exports.methodInfoBasicRecoverAsync = {
  id: 3932260,
  name: "BasicRecoverAsync",
  args: [ {
    type: "bit",
    name: "requeue",
    "default": !1
  } ]
};

module.exports.BasicRecover = 3932270;

var methodInfoBasicRecover = module.exports.methodInfoBasicRecover = {
  id: 3932270,
  name: "BasicRecover",
  args: [ {
    type: "bit",
    name: "requeue",
    "default": !1
  } ]
};

module.exports.BasicRecoverOk = 3932271;

var methodInfoBasicRecoverOk = module.exports.methodInfoBasicRecoverOk = {
  id: 3932271,
  name: "BasicRecoverOk",
  args: []
};

module.exports.BasicNack = 3932280;

var methodInfoBasicNack = module.exports.methodInfoBasicNack = {
  id: 3932280,
  name: "BasicNack",
  args: [ {
    type: "longlong",
    name: "deliveryTag",
    "default": 0
  }, {
    type: "bit",
    name: "multiple",
    "default": !1
  }, {
    type: "bit",
    name: "requeue",
    "default": !0
  } ]
};

module.exports.TxSelect = 5898250;

var methodInfoTxSelect = module.exports.methodInfoTxSelect = {
  id: 5898250,
  name: "TxSelect",
  args: []
};

module.exports.TxSelectOk = 5898251;

var methodInfoTxSelectOk = module.exports.methodInfoTxSelectOk = {
  id: 5898251,
  name: "TxSelectOk",
  args: []
};

module.exports.TxCommit = 5898260;

var methodInfoTxCommit = module.exports.methodInfoTxCommit = {
  id: 5898260,
  name: "TxCommit",
  args: []
};

module.exports.TxCommitOk = 5898261;

var methodInfoTxCommitOk = module.exports.methodInfoTxCommitOk = {
  id: 5898261,
  name: "TxCommitOk",
  args: []
};

module.exports.TxRollback = 5898270;

var methodInfoTxRollback = module.exports.methodInfoTxRollback = {
  id: 5898270,
  name: "TxRollback",
  args: []
};

module.exports.TxRollbackOk = 5898271;

var methodInfoTxRollbackOk = module.exports.methodInfoTxRollbackOk = {
  id: 5898271,
  name: "TxRollbackOk",
  args: []
};

module.exports.ConfirmSelect = 5570570;

var methodInfoConfirmSelect = module.exports.methodInfoConfirmSelect = {
  id: 5570570,
  name: "ConfirmSelect",
  args: [ {
    type: "bit",
    name: "nowait",
    "default": !1
  } ]
};

module.exports.ConfirmSelectOk = 5570571;

var methodInfoConfirmSelectOk = module.exports.methodInfoConfirmSelectOk = {
  id: 5570571,
  name: "ConfirmSelectOk",
  args: []
};

module.exports.BasicProperties = 60;

var propertiesInfoBasicProperties = module.exports.propertiesInfoBasicProperties = {
  id: 60,
  name: "BasicProperties",
  args: [ {
    type: "shortstr",
    name: "contentType"
  }, {
    type: "shortstr",
    name: "contentEncoding"
  }, {
    type: "table",
    name: "headers"
  }, {
    type: "octet",
    name: "deliveryMode"
  }, {
    type: "octet",
    name: "priority"
  }, {
    type: "shortstr",
    name: "correlationId"
  }, {
    type: "shortstr",
    name: "replyTo"
  }, {
    type: "shortstr",
    name: "expiration"
  }, {
    type: "shortstr",
    name: "messageId"
  }, {
    type: "timestamp",
    name: "timestamp"
  }, {
    type: "shortstr",
    name: "type"
  }, {
    type: "shortstr",
    name: "userId"
  }, {
    type: "shortstr",
    name: "appId"
  }, {
    type: "shortstr",
    name: "clusterId"
  } ]
};